image: node:latest

stages:
  - server
  - web
  # - admin

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task

sonarcloud-check:
  stage: server
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    - key: "${CI_JOB_NAME}"
      paths:
        - .sonar/cache
  script:
    - sonar-scanner
  only:
    - main

web-build:
  stage: web
  cache:
    - key:
        files:
          - web/yarn.lock
      paths:
        - web/node_modules/
  type: build
  image: node:latest
  script:
    - cd web
    - yarn
    - yarn build
  only:
    - main

web-deploy:
  stage: web
  type: deploy
  image: node:latest
  needs: ["web-build"]
  cache:
    - key:
        files:
          - web/yarn.lock
      paths:
        - web/node_modules/
  script:
    - cd web
    - yarn
    - yarn build
    - rm -r node_modules/
    - npx netlify-cli deploy --site $NETLIFY_APP --auth $NETLIFY_KEY
  only:
    - main

# admin-build:
#   stage: admin
#   cache:
#     - key:
#         files:
#           - admin/yarn.lock
#       paths:
#         - admin/node_modules/
#   type: build
#   image: node:latest
#   script:
#     - cd admin
#     - yarn
#     - yarn build
#     - rm -r node_modules/
#   only:
#     - main

# admin-deploy:
#   stage: admin
#   type: deploy
#   image: node:latest
#   needs: ["admin-build"]
#   cache:
#     - key:
#         files:
#           - admin/yarn.lock
#       paths:
#         - admin/node_modules/
#   script:
#     - cd admin
#     - yarn
#     - yarn build
#     - rm -r node_modules/
#     - npx netlify-cli deploy --site $NETLIFY_ADMIN_APP --auth $NETLIFY_KEY
#   only:
#     - main

server-build:
  stage: server
  cache:
    - key:
        files:
          - server/yarn.lock
      paths:
        - server/node_modules/
  type: build
  image: node:latest
  script:
    - cd server
    - yarn
    - yarn build
  only:
    - main

server-test:
  stage: server
  cache:
    - key:
        files:
          - server/yarn.lock
      paths:
        - server/node_modules/
  type: test
  image: node:latest
  needs: ["server-build"]
  script:
    - cd server
    - yarn
    - yarn test
    - rm -r node_modules/
  only:
    - main

server-deploy:
  stage: server
  type: deploy
  image: ruby:latest
  needs: ["server-test"]
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - cd server
    - dpl --provider=heroku --app=$HEROKU_APP --api_key=$HEROKU_KEY
  only:
    - main
